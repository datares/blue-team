#Using R

#Time Elapsed
library(ggplot2)
ks <- read.csv("ks18.csv")
ks$deadline <- as.Date(ks$deadline)
ks$launched <- as.Date(ks$launched)
ks$timeElapsed <- (ks$deadline - ks$launched)
#create subset of successful campaigns
success <- subset(ks, ks$state == 'successful')
success$time_in_days <- as.numeric(success$timeElapsed)
#Visualization with frequency polygons
freqpoly <- ggplot(success, aes(time_in_days)) + geom_histogram(binwidth = 1, fill = 'pink') + geom_freqpoly(bins = 50)
print(freqpoly + ggtitle("Distribution of time for successful campaigns to reach goal") + labs(y= "Number of campaigns", x= "Time in days"))
#Visualization with mean line
meanline <- ggplot(success, aes(time_in_days)) + geom_histogram(binwidth = 2, fill= 'lightblue') + geom_vline(aes(xintercept=mean(time_in_days)),color="blue", linetype="dashed", size=0.5) 
print(meanline + ggtitle("Time for successful campaigns to reach goal with mean line") + labs(y= "Number of campaigns", x= "Time in days"))


#Backers
kickstarter_df <- read.csv("ks-projects-201801.csv")
successful_df <- kickstarter_df[kickstarter_df$state=="successful",]
summary(successful_df$backers)
quantile(successful_df$backers, probs = 0.95)
canceled_failed_df <- kickstarter_df[kickstarter_df$state=="canceled"| kickstarter_df$state=="failed",]
others_df <- kickstarter_df[kickstarter_df$state == "live"| kickstarter_df$state == "suspended"|kickstarter_df$state == "undefined",]
summary(canceled_failed_df$backers)
quantile(canceled_failed_df$backers, probs = 0.95) #72 backers at 95 quantile
summary(others_df$backers)
quantile(others_df$backers, probs = 0.95)
hist(successful_df$backers[successful_df$backers < 885], col = "blue", breaks = 100, xlab = "number of backers", ylab = "Frequency", main = "histogram of backers for different states")
hist(canceled_failed_df$backers[canceled_failed_df$backers < 885], col = "orange", add = TRUE,  breaks = 100)
hist(others_df$backers[others_df$backers < 885], col= "green", add = TRUE,  breaks = 100)
axis(side = 1, at = c(100,200,300,400,500,600,700,800,900))
legend("topright",c("successful", "canceled+failed", "live+suspended+undefined"), fill = c("blue", "orange", "green"))
##Calculate the number of 0â€™s for the number of backers in successful projects:
sum_of_backers <- sum(successful_df$backers==0)
length_of_successful_backers <- length(successful_df$backers)
(sum_of_backers*100)/length_of_successful_backers



# Categories
ks <- read.csv("ks-projects-201801.csv")
# Order main categories by number of projects (descending)
mcat_sum <- sort(tapply(ks$name, ks$main_category, length), decreasing = TRUE)
mcat_name <- names(mcat_sum)

# Create factor vector (top3 TRUE or FALSE)
is_top3 <- logical(length(result))
is_top3[ks$main_category %in% mcat_name[1:3]] <- TRUE
is_top3 <- factor(is_top3, levels = c(TRUE, FALSE))
levels(is_top3) <- c("top3", "not_top3")

# Create state factor with desired level order
state_factor <- factor(ks$state, levels = c("successful", "failed", "undefined"))

# Group projects by main category (top 3 or not) and campaign result
top3_success <- tapply(ks$ID, list(state_factor, is_top3), length)

# Convert the number of successful cases to success rate
top3_success_r <- data.frame(top3_success)
top3_success_r[, 1] <- round(top3_success_r[, 1] / sum(top3_success_r[, 1]), 3)
top3_success_r[, 2] <- round(top3_success_r[, 2] / sum(top3_success_r[, 2]), 3)
top3_success_r <- cbind(c("successful", "failed", "undefined"), top3_success_r)
colnames(top3_success_r) <- c("state", "top3", "not_top3")
rownames(top3_success_r) <- NULL

state <- rep(top3_success_r$state, 2)
category <- rep(c("top3", "not_top3"), c(3,3))
proportion <- c(top3_success_r$top3, top3_success_r$not_top3)
graphic_df <- data.frame(state, category, proportion)

ggplot(graphic_df, aes(x = category, y = proportion, fill = state)) + 
        geom_bar(stat = "identity", position = "dodge") +
        labs(x = "Category", y = "Proportion") +
        theme(legend.position = "right") + 
        scale_fill_manual(values = c("#333333", "#05ce78", "#ce055b"))

# We calculate the success rate for all main categories
cat_c <- tapply(ks$ID, list(state_factor, ks$main_category), length)
cat_sum <- apply(cat_c, 2, sum)
cat_sum <- rbind(cat_sum, cat_sum, cat_sum)
cat_p <- data.frame(round(cat_c / cat_sum, 3))
cat_p <- cat_p[, match(sort(cat_p[1, ], decreasing = TRUE), cat_p[1, ])]
cat_p <- cbind("State" = c("successful", "failed", "undefined"), cat_p)
rownames(cat_p) <- NULL

state <- rep(cat_p$State, length(mcat_name))
category <- rep(colnames(cat_p)[-1], rep(3, ncol(cat_p) - 1))
proportion <- logical(0)
for (i in seq_len(ncol(cat_p))[-1]) {
        proportion <- c(proportion, cat_p[, i])
}
graphic_df <- data.frame(state, category, proportion)

graphic_df <- graphic_df[graphic_df$state == "successful", ]

ggplot(graphic_df, aes(x = factor(category, levels = colnames(cat_p)[-1]),
                       y = proportion, fill = state)) + 
        geom_col(stat = "identity", position = "dodge") +
        labs(x = "Category", y = "Proportion") +
        theme(legend.position = "right", 
              axis.text.x = element_text(angle = 0)) + 
        scale_fill_manual(values = c("dodgerblue4")) +
        coord_flip()


#Funding Goal
ks <- read.csv('ksfinaldata.csv')
ks_summary <- ks %>% group_by(main_category) %>% summarise(mean_goal = mean(usd_goal_real), median_goal = median(usd_goal_real))
mean_barplot <- ggplot(data=ks_summary, aes(x=main_category, y=mean_goal))+
  geom_bar(stat='identity', fill = "#CBCBA9") +
  theme(axis.text.x = element_text(angle=90)) +
  ggtitle('Average Funding Goal by Category') +
  xlab('Category') + ylab('Goal in USD')

median_barplot <- ggplot(data=ks_summary, aes(x=main_category, y=median_goal))+
  geom_bar(stat='identity', fill = "#A9CBCB") +
  theme(axis.text.x = element_text(angle=90)) +
  ggtitle('Median Funding Goal by Category') +
  xlab('Category') + ylab('Goal in USD')

ks$success_fail <- ifelse(ks$state == 'successful', 'success', 'failed or otherwise')
ks_summary2 <- ks %>% group_by(main_category, success_fail) %>% summarise(mean_goal = mean(usd_goal_real), median_goal = median(usd_goal_real))
compare_barplot <- ggplot(data=ks_summary2, aes(x=main_category, y=median_goal, fill=success_fail))+
  geom_bar(stat='identity', width = 0.65, position= position_dodge(width=0.65)) +
  theme(axis.text.x = element_text(angle=90)) +
  ggtitle('Median Funding Goal by Category') +
  xlab('Category') + ylab('Goal in USD')

